
/**
 * 
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ MDX-—Ñ–∞–π–ª–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ techhub –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–∏ README.md –≤ ViennaUI
 * –ú–æ–∂–µ—Ç –∫—Ä–∏–≤–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–ø—Å–æ–≤ 
 * –õ—É—á—à–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –ø–∞–ø–∫–∏, –≥–¥–µ –ª–µ–∂–∞—Ç –æ–±–∞ –ø—Ä–æ–µ–∫—Ç–∞
 */
const fs = require('fs');
const path = require('path');

const sourceDir = path.resolve(__dirname, 'techhub', 'docs', 'web', 'components');
const targetDir = path.resolve(__dirname, 'ViennaUI', 'src');

const frontMatterRegex = /^---[\s\S]*?---[\r\n]?/; // Frontmatter
const importRegex = /^[ \t]*import[\s\S]*?\n\n/gm; // –ò–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ MDX
const playgroundRegex = /<Playground[^>]*>|<\/Playground>/g; // <Playground> –∏ </Playground>
const metaRegex = /<Meta[\s\S]*?\/>|Meta[\s\S]*?>([\s\S]*?<\/Meta>)/g; // <Meta> –∏ <Meta ... />
const importSectionRegex = /## –ò–º–ø–æ—Ä—Ç\s+```(?:jsx|js|tsx|ts)?\s*[\s\S]*?```/g; // –°–µ–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–ø—Å–æ–≤
const propsTableRegex = /(?:##.*\n)?\|?\s*Prop\s*\|\s*Type\s*\|\s*Default\s*\|.*?\n\|.*?\n(?:\|.*\|.*\|.*\|.*\|.*\n?)+/g;

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ MDX, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–µ–µ
 */
function extractContentFromMDX(content) {
    content = content.replace(frontMatterRegex, '');

    content = content.replace(importRegex, '');

    content = content.replace(metaRegex, '');

    // –ó–∞–º–µ–Ω—è–µ–º <Playground> –Ω–∞ —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    content = content.replace(playgroundRegex, '```');

    return content.trim();
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç README.md, —Å–æ—Ö—Ä–∞–Ω—è—è:
 * - –°–µ–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∞
 * - –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã Prop | Type | Default | Description
 * - –ò –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ –Ω–∏—Ö
 */
function updateReadme(oldReadme, newContent) {
    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∞
    const importSectionMatch = oldReadme.match(/## –ò–º–ø–æ—Ä—Ç\s+```(?:jsx|js|tsx|ts)?\s*[\s\S]*?```/g);
    const importSection = importSectionMatch ? importSectionMatch[0] : '';

    // –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã Prop | Type | Default | Description
    const propsTables = oldReadme.match(propsTableRegex) || [];

    // –ù–∞—Ö–æ–¥–∏–º, –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∏–º–ø–æ—Ä—Ç –∏ —Ç–∞–±–ª–∏—Ü—ã
    let headerEndIndex = 0;

    if (importSection) {
        const importIndex = oldReadme.indexOf(importSection);
        if (importIndex !== -1) {
            headerEndIndex = importIndex + importSection.length;
        }
    }

    if (propsTables.length > 0) {
        const lastTable = propsTables[propsTables.length - 1];
        const lastTableIndex = oldReadme.indexOf(lastTable);
        if (lastTableIndex !== -1) {
            headerEndIndex = lastTableIndex + lastTable.length;
        }
    }

    if (headerEndIndex === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏ —Ç–∞–±–ª–∏—Ü ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const firstNewLine = oldReadme.split('\n').findIndex(line => line.trim() !== '');
        if (firstNewLine !== -1) {
            headerEndIndex = oldReadme.indexOf('\n', firstNewLine) + 1;
        } else {
            headerEndIndex = oldReadme.length;
        }
    }

    // –£–±–∏—Ä–∞–µ–º –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –∏ —Ç–∞–±–ª–∏—Ü
    const readmeHeader = oldReadme.slice(0, headerEndIndex);
    const finalReadme = readmeHeader + '\n\n' + newContent;

    return finalReadme.trim();
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω MDX-—Ñ–∞–π–ª –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç README.md
 */
function processComponentFile(filename) {
    const componentName = path.basename(filename, '.mdx');
    const sourcePath = path.join(sourceDir, filename);
    const targetComponentDir = path.join(targetDir, componentName);
    const targetReadmePath = path.join(targetComponentDir, 'README.md');

    // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(targetComponentDir)) {
        fs.mkdirSync(targetComponentDir, { recursive: true });
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${componentName}`);
    }

    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ MDX
    if (!fs.existsSync(sourcePath)) {
        console.warn(`‚ö†Ô∏è MDX-—Ñ–∞–π–ª –¥–ª—è ${componentName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
    }

    const mdxContent = fs.readFileSync(sourcePath, 'utf-8');
    const newReadmeContent = extractContentFromMDX(mdxContent);

    // –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–π README –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
    let oldReadmeContent = fs.existsSync(targetReadmePath)
        ? fs.readFileSync(targetReadmePath, 'utf-8')
        : `# ${componentName}\n\n`;

    // –û–±–Ω–æ–≤–ª—è–µ–º README
    const finalReadmeContent = updateReadme(oldReadmeContent, newReadmeContent);

    fs.writeFileSync(targetReadmePath, finalReadmeContent);
    console.log(`‚úÖ README.md –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${componentName} –æ–±–Ω–æ–≤–ª—ë–Ω`);
}


function main() {
    fs.readdir(sourceDir, (err, files) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ —Å MDX-—Ñ–∞–π–ª–∞–º–∏:', err);
            return;
        }

        files
            .filter(file => file.endsWith('.mdx'))
            .forEach(processComponentFile);
    });
}

main();
